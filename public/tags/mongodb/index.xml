<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on Ojas Tapadia</title>
    <link>http://localhost:1313/tags/mongodb/</link>
    <description>Recent content in Mongodb on Ojas Tapadia</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contact Manager Backend using REST API</title>
      <link>http://localhost:1313/projects/contactmanagerapi/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/contactmanagerapi/</guid>
      <description>&lt;p&gt;My first Backend REST API using nodejs, expressjs, mongodb.&#xA;&lt;a href=&#34;https://github.com/0ju1c3/Contact-Manager&#34;&gt;Find code here&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Social Networking REST API</title>
      <link>http://localhost:1313/projects/socialnetworkingapi/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/socialnetworkingapi/</guid>
      <description>&lt;p&gt;Built this as an internship task using MongoDB, Nodejs, Express&lt;/p&gt;&#xA;&lt;h3 id=&#34;code1&#34;&gt;&lt;a href=&#34;https://github.com/0ju1c3/Nodejs-intern-assignment-3-submission&#34;&gt;Code&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Task is to design and implement a RESTful API for a basic social networking application using Node.js and MongoDB. The application will support user profiles, posts (text-based), and the ability to follow other users. Focus on backend development, emphasizing MongoDB for data storage, efficient data retrieval, and data relationship management.&lt;/p&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&#xA;&lt;h3 id=&#34;user-profiles&#34;&gt;User Profiles:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Implement endpoints to create, update, view, and delete user profiles. Include details like username, bio, and profile picture URL, use uuid for user-ids.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;authentication&#34;&gt;Authentication:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Implement JWT-based authentication to secure the API. Ensure users can sign up, log in, and perform actions on behalf of their profiles.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;posts&#34;&gt;Posts:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Allow users to create, view, update, and delete their posts. A post should include text content, a timestamp, and the ID of the user who created it.&lt;/li&gt;&#xA;&lt;li&gt;Implement an endpoint to view the latest posts from users that a given user follows.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;following-mechanism&#34;&gt;Following Mechanism:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Enable users to follow and unfollow other users. Ensure there&amp;rsquo;s an endpoint to retrieve the list of users a given user is following and who is following them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;efficient-data-retrieval&#34;&gt;Efficient Data Retrieval:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use MongoDB&amp;rsquo;s aggregation framework to implement efficient queries for the social feed, where users can see posts from people they follow, sorted by the most recent.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;data-modeling&#34;&gt;Data Modeling:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Design MongoDB schemas for users, posts, and follows. Consider the use of references or embedded documents for optimal performance and query efficiency.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;security-and-validation&#34;&gt;Security and Validation:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ensure input validation to prevent injection attacks and other common security vulnerabilities.&lt;/li&gt;&#xA;&lt;li&gt;Implement rate limiting to protect against brute force attacks.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;testing&#34;&gt;Testing:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write integration tests for your API endpoints to ensure they work as expected and handle errors gracefully.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;documentation&#34;&gt;Documentation:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Provide comprehensive API documentation that includes endpoint descriptions, request/response formats, and example use cases.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;deliverables&#34;&gt;Deliverables&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Source code for the API, including all models, routes, and controllers.&lt;/li&gt;&#xA;&lt;li&gt;MongoDB schema designs.&lt;/li&gt;&#xA;&lt;li&gt;A collection of integration tests.&lt;/li&gt;&#xA;&lt;li&gt;API documentation.&lt;/li&gt;&#xA;&lt;li&gt;A README file with setup instructions, including any environment variables needed and steps to get the application running.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
